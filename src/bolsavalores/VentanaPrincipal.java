/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bolsavalores;

import clases.BaseDeDatos;
import clases.Tablas.Categoria;
import clases.Tablas.Categorias;
import clases.Tablas.DatoValor;
import clases.Secundarias.DatosValor;
import clases.Tablas.Valor;
import clases.Secundarias.Valores;
import java.sql.Connection;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ignacio
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    //Atributos
    Connection conexion;
    Categorias categorias;
    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        //Inicializa Componentes
        initComponents();
        
        //Centramos la ventana
        setLocationRelativeTo(null);
        
        //Ponemos el Layout (Dise√±o) a Nulo
        this.setLayout(null);
        
        //Conectamos a la Base de Datos
        conectaBaseDeDatos();
        
        //Inicializamos las Categorias
        inicializaCategorias();
    }
    
    //Conectamos a la Base de Datos (Cargamos el Objeto conexion)
    private void conectaBaseDeDatos(){
        //Iniciamos la Conexion a la Base de Datos
        BaseDeDatos bd = new BaseDeDatos();
        conexion = bd.getConexion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCBCategorias = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCBValores = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDatosValor = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jCBCategorias.setEditable(true);
        jCBCategorias.setToolTipText("");
        jCBCategorias.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBCategoriasItemStateChanged(evt);
            }
        });

        jLabel1.setText("Conjunto:");

        jLabel2.setText("Valor:");

        jCBValores.setEditable(true);
        jCBValores.setToolTipText("");
        jCBValores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBValoresItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCBCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCBValores, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCBCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jCBValores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTDatosValor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTDatosValor);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCBCategoriasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBCategoriasItemStateChanged

        //Una vez Desmarcado el Valor Seleccionado
        if (evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED){
            //Cargamos los Valores Asociados a la Categoria Seleccionada
            inicializaValores();
        }
    }//GEN-LAST:event_jCBCategoriasItemStateChanged

    private void jCBValoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBValoresItemStateChanged

        //Una vez Desmarcado el Valor Seleccionado
        if (evt.getStateChange() == java.awt.event.ItemEvent.DESELECTED){
            cargaDatosValor();
        }
    }//GEN-LAST:event_jCBValoresItemStateChanged

    private void inicializaCategorias(){
        //Cargamos la Tabla de Categorias desde la BBDD
        cargaTablaCategorias();
        
        //Cargamos el Combo Box de Categorias
        cargarComboBoxCategorias();
        
        //Cargamos el Combo Box de Valores
        inicializaValores();
    }
    
    private void inicializaValores(){
        //Cargamos el Combo Box de Valores
        cargarComboBoxValores();
        
        //Cargamos el JTable Inicial
        cargaDatosValor();
    }
    
    //Cargamos la Tabla de Categorias desde la BBDD
    private void cargaTablaCategorias(){
        //Cargamos la Tabla de Categorias desde la BBDD
        categorias = new Categorias(conexion);
        
        //Actualiza los Datos de cada Categoria desde la Web MegaBolsa
        categorias.actualizaDatosCategorias();
    }

    //Cargamos el Combo Box de Categorias
    private void cargarComboBoxCategorias(){

        //Inicializamos el ComboBox (Solo si ya hay Informacion de Anterioridad)
        if (jCBCategorias.getItemCount() != 0)
            reiniciaCombo(jCBCategorias);

        //Recorremos el ArrayList de categorias
        for (Categoria categoria:categorias.getCategorias()){
            //Cargamos en el ComboBox la Descripcion de Categorias
            jCBCategorias.addItem(categoria.getDescripcion());
        }
        //Marcamos por defecto el Primero Item como Seleccionado
        jCBCategorias.setSelectedIndex(0);
    }

    //Cargamos el Combo Box de Categorias
    private void cargarComboBoxValores(){
        
        //Obtenemos la Categoria Seleccionada
        Categoria categoria = categorias.getCategorias().get(jCBCategorias.getSelectedIndex());
        
        //Obtenemos los Valores de la Categoria Seleccionada
        List <Valor> valores = categoria.getValores();
        
        try{        
            //Inicializamos el ComboBox (Solo si ya hay Informacion de Anterioridad)
            if (jCBValores.getItemCount() != 0)
                reiniciaCombo(jCBValores);            
            
        }catch(Exception ex){
            System.out.println("Error IFC: " + ex.toString());
        }
        //Recorremos el ArrayList de Valores
        for (Valor valor:valores){
            //Cargamos en el ComboBox la Descripcion del Valor
            jCBValores.addItem(valor.getDescripcion());
        }
        //Marcamos por defecto el Primero Item como Seleccionado
        jCBValores.setSelectedIndex(0);
    }
    
    private void reiniciaCombo(javax.swing.JComboBox combo){
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        combo.setModel(modelo);
    }
    
    //Carga los Datos del Valor Seleccionado
    private void cargaDatosValor(){
        //Obtenemos la Categoria Seleccionada
        Categoria categoria = categorias.getCategorias().get(jCBCategorias.getSelectedIndex());
        
        //Obtenemos el Valor Seleccionado
        int posValorSeleccionado = jCBValores.getSelectedIndex();
        Valor valor = categoria.getValores().get(posValorSeleccionado);
        
        //Obtenemos los Datos del Valor
        List <DatoValor> datosValor = valor.getDatosValor();
        
        //Carga el JTable con los Datos
        cargaJTableDatos(datosValor);
    }
    
    public void cargaJTableDatos(List<DatoValor> datosValor)
    {
        //Declaracion de Variables
        String cabecera[]= {"Nombre", "Fecha", "Apertura", "M√°ximo", "M√≠nimo", "Cierre", "Volumen"};
        String datos[][] = {};
        DefaultTableModel modelo = new DefaultTableModel(datos, cabecera);
        jTDatosValor.setModel(modelo);
        Object oDatos[]= {"", "", "", "", "", "", ""};
        int anchos[]={100, 70, 50, 50, 50, 50, 70};

        //Establecemos el Tama√±o de Cada Columna
        for (int i = 0; i < jTDatosValor.getColumnCount(); i++)
            jTDatosValor.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        
        //Obtenemos el numero de Registros
        int numReg = datosValor.size();
       
        try {
            //Recorremos toda la Matriz
            for (int x = 0; x < numReg; x++) {
                if (datosValor.get(x) != null) {
                    oDatos[0] = datosValor.get(x).getCodValor();
                    oDatos[1] = datosValor.get(x).getFecha();
                    oDatos[2] = datosValor.get(x).getApertura();
                    oDatos[3] = datosValor.get(x).getMaximo();
                    oDatos[4] = datosValor.get(x).getMinimo();
                    oDatos[5] = datosValor.get(x).getCierre();
                    oDatos[6] = datosValor.get(x).getVolumen();

                    //A√±adimos la Fila Nueva
                    modelo.addRow(oDatos);
                }
            }
        } catch (Exception e) {
            System.out.println("Error al Rellenar la Tabla " + e.getMessage());
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCBCategorias;
    private javax.swing.JComboBox jCBValores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTDatosValor;
    // End of variables declaration//GEN-END:variables
}
